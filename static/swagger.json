{
    "openapi": "3.0.3",
    "info": {
        "title": "Swagger User API - OpenAPI 3.0",
        "description": "This is a Server based on the OpenAPI 3.0 specification.\n\nSome useful links:\n- [The source API definition for the User API](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)",
        "contact": {
            "email": "marioalfonso.tarantini@gmail.com"
        },
        "version": "1.0"
    },
    "externalDocs": {
        "description": "Find out more about Swagger",
        "url": "http://swagger.io"
    },
    "servers": [
        {
            "url": "https://topv2h1fuc.execute-api.us-east-1.amazonaws.com"
        }
    ],
    "tags": [
        {
            "name": "users",
            "description": "Operations about user"
        }
    ],
    "paths": {
        "/users": {
            "post": {
                "tags": [
                    "users"
                ],
                "summary": "Create user",
                "operationId": "createUser",
                "requestBody": {
                    "description": "Created user object",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/User"
                            }
                        },
                        "application/xml": {
                            "schema": {
                                "$ref": "#/components/schemas/User"
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "$ref": "#/components/schemas/User"
                            }
                        }
                    }
                },
                "responses": {
                    "default": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/user/{id}": {
            "get": {
                "tags": [
                    "users"
                ],
                "summary": "Get user by id",
                "description": "The id must be an uuid",
                "operationId": "getUserById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The id that needs to be fetched. Use ff3bf891-d21c-44bf-aa42-3c0e769f1d61 for testing.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            },
                            "application/xml": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid id supplied"
                    },
                    "404": {
                        "description": "User not found"
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "User": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "format": "uuid",
                        "example": "ff3bf891-d21c-44bf-aa42-3c0e769f1d61"
                    },
                    "name": {
                        "type": "string",
                        "example": "mario"
                    }
                },
                "xml": {
                    "name": "user"
                }
            }
        }
    }
}